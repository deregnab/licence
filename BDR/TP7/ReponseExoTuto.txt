#Prénom : Yann
#Nom : Garbé
#Date : 01/01/2017
#TP n°7
#Astuce : a, b ou c (exemples) sont des attributs.
#Exercice 1 : Check whether they are equivalent.

# Le but ici est de chercher si F1 et F2 sont équilavents. On utilise donc "equiv".

?- ['dbd.pl'].
true.

?- ['Exercice1.txt'].
true.

?- schema(R), fds1(F1), fds2(F2), equiv(R,F1,F2).
R = [a, c, d, e, h],
F1 = [[[a], [c]], [[a, c], [d]], [[e], [a, d]], [[e], [h]]],
F2 = [[[a], [c, d]], [[e], [a, h]]] 

#Exercice 2 : Calculate the closures {ssn} + and {dnumber} + .

# A completer
?- ['dbd.pl'].
true.

?- ['Exercice2.txt'].
true.

?- clotureSSN(X).
X = [address, bdate, dmgrssn, dname, dnumber, ename, ssn].

?- clotureDNUMBER(X).
X = [dmgrssn, dname, dnumber].

#Exercice 3 : Is the set of functional dependencies G in Exercise 2 minimal? If not, find a minimal set of
functional dependencies that is equivalent to G.

?- ['dbd.pl'].
true.

?- ['Tuto/Exercice3.txt'].
true.

?- schema(R), fds(F),mincover(R,F,MinF).
R = [a, c, d, e, h],
F = [[[a], [c]], [[a, c], [d]], [[e], [a, d]], [[e], [h]], [[[a], [c|...]], [[e], [...|...]]]],
MinF = [[[a], [c]], [[a, c], [d]], [[e], [a, h]], [[[a], [c, d]], [[a, h], [e]]]] 

#On se rend compte que l'union de F1 et de F2 de l'exercice 1 n'est pas minimal (h n'est pas dans le minimal).
#Solution :

?- ['dbd.pl'].
true.

?- ['Tuto/Exercice1bis.txt'].
true.

?- schema(R), fds(F), mincover(R,F,MinF).
R = [a, c, d, e, h],
F = [[[a], [c]], [[a, c], [d]], [[e], [a, d]], [[e], [h]]],
MinF = [[[a], [c]], [[a, c], [d]], [[e], [a, h]]] 

#Exercice 4 : What is the key for R? Decompose R into 3NF relations.
	#Clef
?- answer(K).
K = [a, b] .

	#Relation 3NF
?- ['Tuto/Exercice4.txt'].
true.

?- schema(R), fds(F), is3NF(R,F).
false.

?- schema(R), fds(F), threenf(R,F,R3NF).
R = [a, b, c, d, e, f, g, h, i|...],
F = [[[a, b], [c]], [[a], [d, e]], [[b], [f]], [[f], [g, h]], [[d], [i, j]]],
R3NF = [[a, d, e], [a, b, c], [b, f], [d, i, j], [f, g, h]] 

#Exercice 5 : Repeat Exercise 4 for the same R but a different set of functional dependencies

	#Clef
?- answer(K).
K = [a, b, d] .

	#Relation 3NF
?- ['dbd.pl'].
true.

?- ['Tuto/Exercice5.txt'].
true.

?- schema(R), fds(F), is3NF(R,F).
false.

?- schema(R), fds(F), threenf(R,F,R3NF).
R = [a, b, c, d, e, f, g, h, i|...],
F = [[[a, b], [c]], [[b, d], [e, f]], [[b], [f]], [[f], [g, h]], [[d], [i, j]]],
R3NF = [[a, b, c], [b, f], [b, d, e], [d, i, j], [f, g, h], [a, b, d]] 

#Exercice 6 : Is AB a candidate key of this relation? If not, is ABD?

?- ['dbd.pl'].
true.

?- ['Tuto/Exercice6.txt'].
true.

?- goAB.
false.

?- goABD.
true .

#Exercice 7 : Find the candidate keys for R and decompose the relation into 3NF relations.

	#Clef
?- ['dbd.pl'].
true.

?- ['Tuto/Exercice7.txt'].
true.

?- answer(K).
K = [semester, year, dayshours, roomno] .

	#3NF
?- schema(R), fds(F), is3NF(R,F).
false.

?- schema(R), fds(F), threenf(R,F,R3NF).
R = [courseno, secno, offeringdept, credithours, courselevel, instructorssn, semester, year, dayshours|...],
F = [[[courseno], [offeringdept, credithours, courselevel]], [[courseno, secno, semester, year], [dayshours, roomno, noofstudents, instructorssn]], [[roomno, dayshours, semester, year], [instructorssn, courseno, secno]]],
R3NF = [[courseno, courselevel, credithours, offeringdept], [courseno, secno, semester, year, dayshours, noofstudents, roomno], [roomno, dayshours, semester, year, courseno, instructorssn|...]] .

#Exercice 8 : is a lossless join decomposition?

?- ['dbd.pl'].
true.

?- ['Tuto/Exercice8.txt'].
true.

?- schema(R), fds(F), decomp(D), ljd(R,F,D).
[[a,1],[b,1,2],[a,3],[a,4],[a,5],[b,1,6]]
[[b,2,1],[a,2],[b,2,3],[a,4],[a,5],[a,6]]
[[b,3,1],[b,3,2],[b,3,3],[a,4],[a,5],[b,3,6]]
[[b,4,1],[a,2],[b,4,3],[b,4,4],[b,4,5],[a,6]]

false.

#Exercice 9 : 

?- ['dbd.pl'].
true.

?- ['Tuto/Exercice9.txt'].
true.

?- answer(K).
K = [a, b] .

?- schema(R), fds(F),mincover(R,F,MinF).
R = [a, b, c, d, e, f, g, h, i|...],
F = [[[a, b], [c]], [[a], [d, e]], [[b], [f]], [[f], [g, h]], [[d], [i, j]]],
MinF = [[[a], [d, e]], [[a, b], [c]], [[b], [f]], [[d], [i, j]], [[f], [g, h]]] .

?- schema(R), fds(F), is3NF(R,F).
false.

?-  schema(R), fds(F), threenf(R,F,R3NF).
R = [a, b, c, d, e, f, g, h, i|...],
F = [[[a, b], [c]], [[a], [d, e]], [[b], [f]], [[f], [g, h]], [[d], [i, j]]],
R3NF = [[a, d, e], [a, b, c], [b, f], [d, i, j], [f, g, h]] .

?- 

#Exercice 10 : 

?- ['dbd.pl'].
true.

?- ['Tuto/Exercice10.txt'].
true.

?- answer(K).
K = [a, b, d] .

?- schema(R), fds(F),mincover(R,F,MinF).
R = [a, b, c, d, e, f, g, h, i|...],
F = [[[a, b], [c]], [[b, d], [e, f]], [[b], [f]], [[f], [g, h]], [[d], [i, j]]],
MinF = [[[a, b], [c]], [[b], [f]], [[b, d], [e]], [[d], [i, j]], [[f], [g, h]]] 

?- schema(R), fds(F), threenf(R,F,R3NF).
R = [a, b, c, d, e, f, g, h, i|...],
F = [[[a, b], [c]], [[b, d], [e, f]], [[b], [f]], [[f], [g, h]], [[d], [i, j]]],
R3NF = [[a, b, c], [b, f], [b, d, e], [d, i, j], [f, g, h], [a, b, d]] .

#Exercice 11 : 

?- ['../dbd.pl'].
true.

?- ['Exercice11.txt'].
true.

?- answer(K).
Scheme to decompose = [a,b,c,d,e,f,g,h,i,j] Offending FD: [a]-->[d,e,i,j]
Scheme to decompose = [a,b,c,f,g,h] Offending FD: [a,c,f]-->[g,h]
Scheme to decompose = [a,b,c,f] Offending FD: [b]-->[f]
Final Result is: 
[a,b,c]
[a,d,e,i,j]
[a,c,f,g,h]
[b,f]

K = [[a, b, c], [a, d, e, i, j], [a, c, f, g, h], [b, f]]


?- ['Exercice11bis.txt'].
true.

?- answer(K).
Scheme to decompose = [a,b,c,d,e,f,g,h,i,j] Offending FD: [a,b]-->[c,f,g,h]
Scheme to decompose = [a,b,d,e,i,j] Offending FD: [a,d]-->[i,j]
Scheme to decompose = [a,b,d,e] Offending FD: [b,d]-->[e]
Final Result is: 
[a,b,d]
[a,b,c,f,g,h]
[a,d,i,j]
[b,d,e]

K = [[a, b, d], [a, b, c, f, g, h], [a, d, i, j], [b, d, e]] 

#Exercice 12 :

?- ['../dbd.pl'].
true.

?- ['Exercice12.txt'].
true.

?- cand(K).
K = [a, d, e] 

?- tnf(K).
K = [[a, b, c], [c, d, e], [d, e, b], [a, d, e]] 

?- bcnf(K).
Scheme to decompose = [a,b,c,d,e] Offending FD: [a,b]-->[c]
Scheme to decompose = [a,b,d,e] Offending FD: [d,e]-->[b]
Final Result is: 
[a,d,e]
[a,b,c]
[d,e,b]

K = [[a, d, e], [a, b, c], [d, e, b]] .



?- ['../dbd.pl'].
true.

?- ['Exercice12bis.txt'].
true.

?- cand(K).
K = [semester, year, dayshours, roomno] 

?- tnf(K).
K = [[courseno, courselevel, credithours, offeringdept], [courseno, secno, semester, year, dayshours, noofstudents, roomno], [roomno, dayshours, semester, year, courseno, instructorssn|...]] .

?- bcnf(K).
Scheme to decompose = [courseno,secno,offeringdept,credithours,courselevel,instructorssn,semester,year,dayshours,roomno,noofstudents] Offending FD: [courseno]-->[courselevel,credithours,offeringdept]
Final Result is: 
[courseno,secno,instructorssn,semester,year,dayshours,roomno,noofstudents]
[courseno,courselevel,credithours,offeringdept]

K = [[courseno, secno, instructorssn, semester, year, dayshours, roomno, noofstudents], [courseno, courselevel, credithours, offeringdept]] .

